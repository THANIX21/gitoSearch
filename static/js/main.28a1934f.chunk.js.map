{"version":3,"sources":["App.js","reportWebVitals.js","index.js"],"names":["App","props","handleSearchChange","event","setState","searchTerm","target","value","handleEnterPress","keyCode","searchGit","a","fetch","state","res","json","data","arr","items","document","getElementById","innerHTML","displayResults","length","resLength","container","itmNo","content","name","owner","login","html_url","description","forks_count","stargazers_count","open_issues","bind","className","type","id","this","onKeyDown","onChange","Button","onClick","Component","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode"],"mappings":"mRA2HeA,G,wDArHb,WAAYC,GAAQ,IAAD,8BACjB,cAAMA,IAgBRC,mBAAqB,SAACC,GACpB,EAAKC,SAAS,CACVC,WAAYF,EAAMG,OAAOC,SAnBZ,EAwBnBC,iBAAmB,SAACL,GACG,KAAlBA,EAAMM,SACP,EAAKC,aA1BU,EA8BnBA,UA9BmB,sBA8BP,8BAAAC,EAAA,+EAGUC,MAAM,gDAAD,OAAiD,EAAKC,MAAMR,aAH3E,cAGFS,EAHE,gBAISA,EAAIC,OAJb,OAIJC,EAJI,OAKR,EAAKC,IAAMD,EAAKE,MACbF,EAAKE,MAAQ,EACIC,SAASC,eAAe,WAChCC,UAAV,8KAUA,EAAKC,eAAe,EAAKL,IAAIM,QAlBvB,kDAwBUJ,SAASC,eAAe,WAChCC,UAAV,uJAzBQ,0DA9BO,EAkEnBC,eAAiB,SAAAE,GACf,IAAMC,EAAYN,SAASC,eAAe,WAC1CK,EAAUJ,UAAY,GAEtB,IAAK,IAAIK,EAAQ,EAAGA,EAAQF,EAAWE,IAAS,CAE9C,IAAMC,EAAO,kIAID,EAAKV,IAAIS,GAAOE,KAJf,kCAKD,EAAKX,IAAIS,GAAOG,MAAMC,MALrB,+CAMY,EAAKb,IAAIS,GAAOK,SAN5B,YAMwC,EAAKd,IAAIS,GAAOK,SANxD,iDAOU,KAAO,EAAKd,IAAIS,GAAOM,YAPjC,sCAQI,WAAa,EAAKf,IAAIS,GAAOO,YARjC,2CASS,MAAQ,EAAKhB,IAAIS,GAAOQ,iBATjC,4CAUU,KAAO,EAAKjB,IAAIS,GAAOS,YAVjC,kFAgBbV,EAAUJ,WAAaM,IArFzB,EAAKd,MAAQ,CACXR,WAAY,IAGd,EAAKY,IAAM,GAEX,EAAKf,mBAAqB,EAAKA,mBAAmBkC,KAAxB,gBAC1B,EAAK5B,iBAAmB,EAAKA,iBAAiB4B,KAAtB,gBACxB,EAAK1B,UAAY,EAAKA,UAAU0B,KAAf,gBACjB,EAAKd,eAAiB,EAAKA,eAAec,KAApB,gBAZL,E,qDA6FjB,OACE,sBAAKC,UAAU,MAAf,UACE,8BACE,8CAIA,8BACE,uBACEC,KAAK,OACLC,GAAG,cACHhC,MAAOiC,KAAK3B,MAAMR,WAClBoC,UAAWD,KAAKhC,iBAChBkC,SAAUF,KAAKtC,uBAGrB,cAACyC,EAAA,EAAD,CAAQJ,GAAG,YAAYhC,MAAM,gBAAgBqC,QAASJ,KAAK9B,UAA3D,2BACA,qBAAK6B,GAAG,mB,GAhHEM,cCQHC,EAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxC,6BAAqBC,MAAK,YAAkD,IAA/CC,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAON,GACPO,EAAQP,OCDdQ,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFtC,SAASC,eAAe,SAG1B0B,M","file":"static/js/main.28a1934f.chunk.js","sourcesContent":["import React, {Component} from 'react';\nimport { Button } from 'react-bootstrap';\nimport './App.css';\n\nclass App extends Component {\n  \n  constructor(props) {\n    super(props)\n    \n    this.state = {\n      searchTerm: ''                             \n    }   \n\n    this.arr = [];\n\n    this.handleSearchChange = this.handleSearchChange.bind(this);  \n    this.handleEnterPress = this.handleEnterPress.bind(this);  \n    this.searchGit = this.searchGit.bind(this);\n    this.displayResults = this.displayResults.bind(this);\n\n\n  }     \n\n  handleSearchChange = (event) => { //change variable as it is entered\n    this.setState({\n        searchTerm: event.target.value\n      }\n    )    \n  }\n  \n  handleEnterPress = (event) => {\n    if(event.keyCode === 13){\n      this.searchGit();\n    }    \n  }\n\n  searchGit = async () => { //retrieve data, convert to json and store items in array for easy access \n    try {\n\n      const res = await fetch(`https://api.github.com/search/repositories?q=${this.state.searchTerm}`)\n      let data = await res.json();\n      this.arr = data.items;  \n      if(data.items < 1) { //make sure results are found by checking the length of the json items array\n        const container = document.getElementById('results');\n        container.innerHTML = `\n          <div class=\"container\">\n            <div class=\"card\">          \n              No results were found        \n            </div>\n          </div> \n        `;\n\n      } else {\n\n        this.displayResults(this.arr.length); \n         \n      }        \n      \n    } catch (err) { //make sure that if nothing is searched this message is displayed\n\n      const container = document.getElementById('results');\n      container.innerHTML = `\n      <div class=\"container\">\n        <div class=\"card\">          \n          Enter a search term         \n        </div>\n      </div> \n      `;\n      \n    }    \n  } \n\n  displayResults = resLength => { //get result area to inject search results dynamically and add html to describe every search result\n    const container = document.getElementById('results');\n    container.innerHTML = '';\n\n    for (var itmNo = 0; itmNo < resLength; itmNo++) {        \n      \n      const content = `\n      <div class=\"container\">\n        <div class=\"card\">\n          <div class=\"front\">            \n            <h2>${this.arr[itmNo].name}</h2>\n            <h3>${this.arr[itmNo].owner.login}</h3>\n            <p>URL : <a href=${this.arr[itmNo].html_url}>${this.arr[itmNo].html_url}</a> </p>\n            <p>Description:${'  ' + this.arr[itmNo].description}</p>\n            <p>Forks:${'        ' + this.arr[itmNo].forks_count}</p>\n            <p>Stargazers:${'   ' + this.arr[itmNo].stargazers_count}</p>\n            <p>Open Issues:${'  ' + this.arr[itmNo].open_issues}</p>\n          </div>          \n        </div>\n      </div>        \n      `;\n\n      container.innerHTML += content;            \n    }\n  }  \n\n  render () { //render title, search button and result area to display data to be injected later\n    return (      \n      <div className=\"App\">        \n        <div>\n          <h1>\n            gitoSearch\n          </h1>\n        </div>        \n          <div>\n            <input\n              type='text' \n              id='searchfield'\n              value={this.state.searchTerm} \n              onKeyDown={this.handleEnterPress}\n              onChange={this.handleSearchChange}                                                       \n            />                             \n        </div>                \n        <Button id=\"SearchBtn\" value=\"Search Github\" onClick={this.searchGit}>Search Github</Button>         \n        <div id=\"results\">                                         \n        </div>                                                    \n      </div>       \n    )\n  }    \n}\n\nexport default App\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\nreportWebVitals();\n"],"sourceRoot":""}